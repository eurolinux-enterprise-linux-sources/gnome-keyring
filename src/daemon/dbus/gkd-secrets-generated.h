/*
 * Generated by gdbus-codegen 2.54.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef ____DAEMON_DBUS_GKD_SECRETS_GENERATED_H__
#define ____DAEMON_DBUS_GKD_SECRETS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Service */

#define GKD_TYPE_EXPORTED_SERVICE (gkd_exported_service_get_type ())
#define GKD_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SERVICE, GkdExportedService))
#define GKD_IS_EXPORTED_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SERVICE))
#define GKD_EXPORTED_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_SERVICE, GkdExportedServiceIface))

struct _GkdExportedService;
typedef struct _GkdExportedService GkdExportedService;
typedef struct _GkdExportedServiceIface GkdExportedServiceIface;

struct _GkdExportedServiceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_change_lock) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_collection);

  gboolean (*handle_create_collection) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties,
    const gchar *arg_alias);

  gboolean (*handle_get_secrets) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_items,
    const gchar *arg_session);

  gboolean (*handle_lock) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_objects);

  gboolean (*handle_lock_service) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_open_session) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_algorithm,
    GVariant *arg_input);

  gboolean (*handle_read_alias) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_search_items) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_attributes);

  gboolean (*handle_set_alias) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_collection);

  gboolean (*handle_unlock) (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_objects);

  const gchar *const * (*get_collections) (GkdExportedService *object);

  void (*collection_changed) (
    GkdExportedService *object,
    const gchar *arg_collection);

  void (*collection_created) (
    GkdExportedService *object,
    const gchar *arg_collection);

  void (*collection_deleted) (
    GkdExportedService *object,
    const gchar *arg_collection);

};

GType gkd_exported_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_service_interface_info (void);
guint gkd_exported_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_service_complete_open_session (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    GVariant *output,
    const gchar *result);

void gkd_exported_service_complete_create_collection (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *collection,
    const gchar *prompt);

void gkd_exported_service_complete_search_items (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unlocked,
    const gchar *const *locked);

void gkd_exported_service_complete_unlock (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unlocked,
    const gchar *prompt);

void gkd_exported_service_complete_lock (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *locked,
    const gchar *Prompt);

void gkd_exported_service_complete_lock_service (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation);

void gkd_exported_service_complete_change_lock (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *prompt);

void gkd_exported_service_complete_get_secrets (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    GVariant *secrets);

void gkd_exported_service_complete_read_alias (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation,
    const gchar *collection);

void gkd_exported_service_complete_set_alias (
    GkdExportedService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gkd_exported_service_emit_collection_created (
    GkdExportedService *object,
    const gchar *arg_collection);

void gkd_exported_service_emit_collection_deleted (
    GkdExportedService *object,
    const gchar *arg_collection);

void gkd_exported_service_emit_collection_changed (
    GkdExportedService *object,
    const gchar *arg_collection);



/* D-Bus method calls: */
void gkd_exported_service_call_open_session (
    GkdExportedService *proxy,
    const gchar *arg_algorithm,
    GVariant *arg_input,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_open_session_finish (
    GkdExportedService *proxy,
    GVariant **out_output,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_open_session_sync (
    GkdExportedService *proxy,
    const gchar *arg_algorithm,
    GVariant *arg_input,
    GVariant **out_output,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_create_collection (
    GkdExportedService *proxy,
    GVariant *arg_properties,
    const gchar *arg_alias,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_create_collection_finish (
    GkdExportedService *proxy,
    gchar **out_collection,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_create_collection_sync (
    GkdExportedService *proxy,
    GVariant *arg_properties,
    const gchar *arg_alias,
    gchar **out_collection,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_search_items (
    GkdExportedService *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_search_items_finish (
    GkdExportedService *proxy,
    gchar ***out_unlocked,
    gchar ***out_locked,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_search_items_sync (
    GkdExportedService *proxy,
    GVariant *arg_attributes,
    gchar ***out_unlocked,
    gchar ***out_locked,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_unlock (
    GkdExportedService *proxy,
    const gchar *const *arg_objects,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_unlock_finish (
    GkdExportedService *proxy,
    gchar ***out_unlocked,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_unlock_sync (
    GkdExportedService *proxy,
    const gchar *const *arg_objects,
    gchar ***out_unlocked,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_lock (
    GkdExportedService *proxy,
    const gchar *const *arg_objects,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_lock_finish (
    GkdExportedService *proxy,
    gchar ***out_locked,
    gchar **out_Prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_lock_sync (
    GkdExportedService *proxy,
    const gchar *const *arg_objects,
    gchar ***out_locked,
    gchar **out_Prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_lock_service (
    GkdExportedService *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_lock_service_finish (
    GkdExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_lock_service_sync (
    GkdExportedService *proxy,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_change_lock (
    GkdExportedService *proxy,
    const gchar *arg_collection,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_change_lock_finish (
    GkdExportedService *proxy,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_change_lock_sync (
    GkdExportedService *proxy,
    const gchar *arg_collection,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_get_secrets (
    GkdExportedService *proxy,
    const gchar *const *arg_items,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_get_secrets_finish (
    GkdExportedService *proxy,
    GVariant **out_secrets,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_get_secrets_sync (
    GkdExportedService *proxy,
    const gchar *const *arg_items,
    const gchar *arg_session,
    GVariant **out_secrets,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_read_alias (
    GkdExportedService *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_read_alias_finish (
    GkdExportedService *proxy,
    gchar **out_collection,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_read_alias_sync (
    GkdExportedService *proxy,
    const gchar *arg_name,
    gchar **out_collection,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_service_call_set_alias (
    GkdExportedService *proxy,
    const gchar *arg_name,
    const gchar *arg_collection,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_service_call_set_alias_finish (
    GkdExportedService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_service_call_set_alias_sync (
    GkdExportedService *proxy,
    const gchar *arg_name,
    const gchar *arg_collection,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *gkd_exported_service_get_collections (GkdExportedService *object);
gchar **gkd_exported_service_dup_collections (GkdExportedService *object);
void gkd_exported_service_set_collections (GkdExportedService *object, const gchar *const *value);


/* ---- */

#define GKD_TYPE_EXPORTED_SERVICE_PROXY (gkd_exported_service_proxy_get_type ())
#define GKD_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SERVICE_PROXY, GkdExportedServiceProxy))
#define GKD_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_SERVICE_PROXY, GkdExportedServiceProxyClass))
#define GKD_EXPORTED_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_SERVICE_PROXY, GkdExportedServiceProxyClass))
#define GKD_IS_EXPORTED_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SERVICE_PROXY))
#define GKD_IS_EXPORTED_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_SERVICE_PROXY))

typedef struct _GkdExportedServiceProxy GkdExportedServiceProxy;
typedef struct _GkdExportedServiceProxyClass GkdExportedServiceProxyClass;
typedef struct _GkdExportedServiceProxyPrivate GkdExportedServiceProxyPrivate;

struct _GkdExportedServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedServiceProxyPrivate *priv;
};

struct _GkdExportedServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_service_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedServiceProxy, g_object_unref)
#endif

void gkd_exported_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedService *gkd_exported_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedService *gkd_exported_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedService *gkd_exported_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedService *gkd_exported_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_SERVICE_SKELETON (gkd_exported_service_skeleton_get_type ())
#define GKD_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SERVICE_SKELETON, GkdExportedServiceSkeleton))
#define GKD_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_SERVICE_SKELETON, GkdExportedServiceSkeletonClass))
#define GKD_EXPORTED_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_SERVICE_SKELETON, GkdExportedServiceSkeletonClass))
#define GKD_IS_EXPORTED_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SERVICE_SKELETON))
#define GKD_IS_EXPORTED_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_SERVICE_SKELETON))

typedef struct _GkdExportedServiceSkeleton GkdExportedServiceSkeleton;
typedef struct _GkdExportedServiceSkeletonClass GkdExportedServiceSkeletonClass;
typedef struct _GkdExportedServiceSkeletonPrivate GkdExportedServiceSkeletonPrivate;

struct _GkdExportedServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedServiceSkeletonPrivate *priv;
};

struct _GkdExportedServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_service_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedServiceSkeleton, g_object_unref)
#endif

GkdExportedService *gkd_exported_service_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Collection */

#define GKD_TYPE_EXPORTED_COLLECTION (gkd_exported_collection_get_type ())
#define GKD_EXPORTED_COLLECTION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_COLLECTION, GkdExportedCollection))
#define GKD_IS_EXPORTED_COLLECTION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_COLLECTION))
#define GKD_EXPORTED_COLLECTION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_COLLECTION, GkdExportedCollectionIface))

struct _GkdExportedCollection;
typedef struct _GkdExportedCollection GkdExportedCollection;
typedef struct _GkdExportedCollectionIface GkdExportedCollectionIface;

struct _GkdExportedCollectionIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_create_item) (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties,
    GVariant *arg_secret,
    gboolean arg_replace);

  gboolean (*handle_delete) (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_search_items) (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_attributes);

  guint64  (*get_created) (GkdExportedCollection *object);

  const gchar *const * (*get_items) (GkdExportedCollection *object);

  const gchar * (*get_label) (GkdExportedCollection *object);

  gboolean  (*get_locked) (GkdExportedCollection *object);

  guint64  (*get_modified) (GkdExportedCollection *object);

  void (*item_changed) (
    GkdExportedCollection *object,
    const gchar *arg_item);

  void (*item_created) (
    GkdExportedCollection *object,
    const gchar *arg_item);

  void (*item_deleted) (
    GkdExportedCollection *object,
    const gchar *arg_item);

};

GType gkd_exported_collection_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_collection_interface_info (void);
guint gkd_exported_collection_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_collection_complete_delete (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation,
    const gchar *prompt);

void gkd_exported_collection_complete_search_items (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *results);

void gkd_exported_collection_complete_create_item (
    GkdExportedCollection *object,
    GDBusMethodInvocation *invocation,
    const gchar *item,
    const gchar *prompt);



/* D-Bus signal emissions functions: */
void gkd_exported_collection_emit_item_created (
    GkdExportedCollection *object,
    const gchar *arg_item);

void gkd_exported_collection_emit_item_deleted (
    GkdExportedCollection *object,
    const gchar *arg_item);

void gkd_exported_collection_emit_item_changed (
    GkdExportedCollection *object,
    const gchar *arg_item);



/* D-Bus method calls: */
void gkd_exported_collection_call_delete (
    GkdExportedCollection *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_collection_call_delete_finish (
    GkdExportedCollection *proxy,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_collection_call_delete_sync (
    GkdExportedCollection *proxy,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_collection_call_search_items (
    GkdExportedCollection *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_collection_call_search_items_finish (
    GkdExportedCollection *proxy,
    gchar ***out_results,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_collection_call_search_items_sync (
    GkdExportedCollection *proxy,
    GVariant *arg_attributes,
    gchar ***out_results,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_collection_call_create_item (
    GkdExportedCollection *proxy,
    GVariant *arg_properties,
    GVariant *arg_secret,
    gboolean arg_replace,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_collection_call_create_item_finish (
    GkdExportedCollection *proxy,
    gchar **out_item,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_collection_call_create_item_sync (
    GkdExportedCollection *proxy,
    GVariant *arg_properties,
    GVariant *arg_secret,
    gboolean arg_replace,
    gchar **out_item,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *gkd_exported_collection_get_items (GkdExportedCollection *object);
gchar **gkd_exported_collection_dup_items (GkdExportedCollection *object);
void gkd_exported_collection_set_items (GkdExportedCollection *object, const gchar *const *value);

const gchar *gkd_exported_collection_get_label (GkdExportedCollection *object);
gchar *gkd_exported_collection_dup_label (GkdExportedCollection *object);
void gkd_exported_collection_set_label (GkdExportedCollection *object, const gchar *value);

gboolean gkd_exported_collection_get_locked (GkdExportedCollection *object);
void gkd_exported_collection_set_locked (GkdExportedCollection *object, gboolean value);

guint64 gkd_exported_collection_get_created (GkdExportedCollection *object);
void gkd_exported_collection_set_created (GkdExportedCollection *object, guint64 value);

guint64 gkd_exported_collection_get_modified (GkdExportedCollection *object);
void gkd_exported_collection_set_modified (GkdExportedCollection *object, guint64 value);


/* ---- */

#define GKD_TYPE_EXPORTED_COLLECTION_PROXY (gkd_exported_collection_proxy_get_type ())
#define GKD_EXPORTED_COLLECTION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_COLLECTION_PROXY, GkdExportedCollectionProxy))
#define GKD_EXPORTED_COLLECTION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_COLLECTION_PROXY, GkdExportedCollectionProxyClass))
#define GKD_EXPORTED_COLLECTION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_COLLECTION_PROXY, GkdExportedCollectionProxyClass))
#define GKD_IS_EXPORTED_COLLECTION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_COLLECTION_PROXY))
#define GKD_IS_EXPORTED_COLLECTION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_COLLECTION_PROXY))

typedef struct _GkdExportedCollectionProxy GkdExportedCollectionProxy;
typedef struct _GkdExportedCollectionProxyClass GkdExportedCollectionProxyClass;
typedef struct _GkdExportedCollectionProxyPrivate GkdExportedCollectionProxyPrivate;

struct _GkdExportedCollectionProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedCollectionProxyPrivate *priv;
};

struct _GkdExportedCollectionProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_collection_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedCollectionProxy, g_object_unref)
#endif

void gkd_exported_collection_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedCollection *gkd_exported_collection_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedCollection *gkd_exported_collection_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_collection_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedCollection *gkd_exported_collection_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedCollection *gkd_exported_collection_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_COLLECTION_SKELETON (gkd_exported_collection_skeleton_get_type ())
#define GKD_EXPORTED_COLLECTION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_COLLECTION_SKELETON, GkdExportedCollectionSkeleton))
#define GKD_EXPORTED_COLLECTION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_COLLECTION_SKELETON, GkdExportedCollectionSkeletonClass))
#define GKD_EXPORTED_COLLECTION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_COLLECTION_SKELETON, GkdExportedCollectionSkeletonClass))
#define GKD_IS_EXPORTED_COLLECTION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_COLLECTION_SKELETON))
#define GKD_IS_EXPORTED_COLLECTION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_COLLECTION_SKELETON))

typedef struct _GkdExportedCollectionSkeleton GkdExportedCollectionSkeleton;
typedef struct _GkdExportedCollectionSkeletonClass GkdExportedCollectionSkeletonClass;
typedef struct _GkdExportedCollectionSkeletonPrivate GkdExportedCollectionSkeletonPrivate;

struct _GkdExportedCollectionSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedCollectionSkeletonPrivate *priv;
};

struct _GkdExportedCollectionSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_collection_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedCollectionSkeleton, g_object_unref)
#endif

GkdExportedCollection *gkd_exported_collection_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Item */

#define GKD_TYPE_EXPORTED_ITEM (gkd_exported_item_get_type ())
#define GKD_EXPORTED_ITEM(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_ITEM, GkdExportedItem))
#define GKD_IS_EXPORTED_ITEM(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_ITEM))
#define GKD_EXPORTED_ITEM_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_ITEM, GkdExportedItemIface))

struct _GkdExportedItem;
typedef struct _GkdExportedItem GkdExportedItem;
typedef struct _GkdExportedItemIface GkdExportedItemIface;

struct _GkdExportedItemIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_delete) (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_secret) (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session);

  gboolean (*handle_set_secret) (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_secret);

  GVariant * (*get_attributes) (GkdExportedItem *object);

  guint64  (*get_created) (GkdExportedItem *object);

  const gchar * (*get_label) (GkdExportedItem *object);

  gboolean  (*get_locked) (GkdExportedItem *object);

  guint64  (*get_modified) (GkdExportedItem *object);

  const gchar * (*get_type_) (GkdExportedItem *object);

};

GType gkd_exported_item_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_item_interface_info (void);
guint gkd_exported_item_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_item_complete_delete (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation,
    const gchar *Prompt);

void gkd_exported_item_complete_get_secret (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation,
    GVariant *secret);

void gkd_exported_item_complete_set_secret (
    GkdExportedItem *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gkd_exported_item_call_delete (
    GkdExportedItem *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_item_call_delete_finish (
    GkdExportedItem *proxy,
    gchar **out_Prompt,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_item_call_delete_sync (
    GkdExportedItem *proxy,
    gchar **out_Prompt,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_item_call_get_secret (
    GkdExportedItem *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_item_call_get_secret_finish (
    GkdExportedItem *proxy,
    GVariant **out_secret,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_item_call_get_secret_sync (
    GkdExportedItem *proxy,
    const gchar *arg_session,
    GVariant **out_secret,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_item_call_set_secret (
    GkdExportedItem *proxy,
    GVariant *arg_secret,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_item_call_set_secret_finish (
    GkdExportedItem *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_item_call_set_secret_sync (
    GkdExportedItem *proxy,
    GVariant *arg_secret,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gkd_exported_item_get_locked (GkdExportedItem *object);
void gkd_exported_item_set_locked (GkdExportedItem *object, gboolean value);

GVariant *gkd_exported_item_get_attributes (GkdExportedItem *object);
GVariant *gkd_exported_item_dup_attributes (GkdExportedItem *object);
void gkd_exported_item_set_attributes (GkdExportedItem *object, GVariant *value);

const gchar *gkd_exported_item_get_label (GkdExportedItem *object);
gchar *gkd_exported_item_dup_label (GkdExportedItem *object);
void gkd_exported_item_set_label (GkdExportedItem *object, const gchar *value);

const gchar *gkd_exported_item_get_type_ (GkdExportedItem *object);
gchar *gkd_exported_item_dup_type_ (GkdExportedItem *object);
void gkd_exported_item_set_type_ (GkdExportedItem *object, const gchar *value);

guint64 gkd_exported_item_get_created (GkdExportedItem *object);
void gkd_exported_item_set_created (GkdExportedItem *object, guint64 value);

guint64 gkd_exported_item_get_modified (GkdExportedItem *object);
void gkd_exported_item_set_modified (GkdExportedItem *object, guint64 value);


/* ---- */

#define GKD_TYPE_EXPORTED_ITEM_PROXY (gkd_exported_item_proxy_get_type ())
#define GKD_EXPORTED_ITEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_ITEM_PROXY, GkdExportedItemProxy))
#define GKD_EXPORTED_ITEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_ITEM_PROXY, GkdExportedItemProxyClass))
#define GKD_EXPORTED_ITEM_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_ITEM_PROXY, GkdExportedItemProxyClass))
#define GKD_IS_EXPORTED_ITEM_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_ITEM_PROXY))
#define GKD_IS_EXPORTED_ITEM_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_ITEM_PROXY))

typedef struct _GkdExportedItemProxy GkdExportedItemProxy;
typedef struct _GkdExportedItemProxyClass GkdExportedItemProxyClass;
typedef struct _GkdExportedItemProxyPrivate GkdExportedItemProxyPrivate;

struct _GkdExportedItemProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedItemProxyPrivate *priv;
};

struct _GkdExportedItemProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_item_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedItemProxy, g_object_unref)
#endif

void gkd_exported_item_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedItem *gkd_exported_item_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedItem *gkd_exported_item_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_item_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedItem *gkd_exported_item_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedItem *gkd_exported_item_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_ITEM_SKELETON (gkd_exported_item_skeleton_get_type ())
#define GKD_EXPORTED_ITEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_ITEM_SKELETON, GkdExportedItemSkeleton))
#define GKD_EXPORTED_ITEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_ITEM_SKELETON, GkdExportedItemSkeletonClass))
#define GKD_EXPORTED_ITEM_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_ITEM_SKELETON, GkdExportedItemSkeletonClass))
#define GKD_IS_EXPORTED_ITEM_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_ITEM_SKELETON))
#define GKD_IS_EXPORTED_ITEM_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_ITEM_SKELETON))

typedef struct _GkdExportedItemSkeleton GkdExportedItemSkeleton;
typedef struct _GkdExportedItemSkeletonClass GkdExportedItemSkeletonClass;
typedef struct _GkdExportedItemSkeletonPrivate GkdExportedItemSkeletonPrivate;

struct _GkdExportedItemSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedItemSkeletonPrivate *priv;
};

struct _GkdExportedItemSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_item_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedItemSkeleton, g_object_unref)
#endif

GkdExportedItem *gkd_exported_item_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Session */

#define GKD_TYPE_EXPORTED_SESSION (gkd_exported_session_get_type ())
#define GKD_EXPORTED_SESSION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SESSION, GkdExportedSession))
#define GKD_IS_EXPORTED_SESSION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SESSION))
#define GKD_EXPORTED_SESSION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_SESSION, GkdExportedSessionIface))

struct _GkdExportedSession;
typedef struct _GkdExportedSession GkdExportedSession;
typedef struct _GkdExportedSessionIface GkdExportedSessionIface;

struct _GkdExportedSessionIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_close) (
    GkdExportedSession *object,
    GDBusMethodInvocation *invocation);

};

GType gkd_exported_session_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_session_interface_info (void);
guint gkd_exported_session_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_session_complete_close (
    GkdExportedSession *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gkd_exported_session_call_close (
    GkdExportedSession *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_session_call_close_finish (
    GkdExportedSession *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_session_call_close_sync (
    GkdExportedSession *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GKD_TYPE_EXPORTED_SESSION_PROXY (gkd_exported_session_proxy_get_type ())
#define GKD_EXPORTED_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SESSION_PROXY, GkdExportedSessionProxy))
#define GKD_EXPORTED_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_SESSION_PROXY, GkdExportedSessionProxyClass))
#define GKD_EXPORTED_SESSION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_SESSION_PROXY, GkdExportedSessionProxyClass))
#define GKD_IS_EXPORTED_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SESSION_PROXY))
#define GKD_IS_EXPORTED_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_SESSION_PROXY))

typedef struct _GkdExportedSessionProxy GkdExportedSessionProxy;
typedef struct _GkdExportedSessionProxyClass GkdExportedSessionProxyClass;
typedef struct _GkdExportedSessionProxyPrivate GkdExportedSessionProxyPrivate;

struct _GkdExportedSessionProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedSessionProxyPrivate *priv;
};

struct _GkdExportedSessionProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_session_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedSessionProxy, g_object_unref)
#endif

void gkd_exported_session_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedSession *gkd_exported_session_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedSession *gkd_exported_session_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_session_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedSession *gkd_exported_session_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedSession *gkd_exported_session_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_SESSION_SKELETON (gkd_exported_session_skeleton_get_type ())
#define GKD_EXPORTED_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_SESSION_SKELETON, GkdExportedSessionSkeleton))
#define GKD_EXPORTED_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_SESSION_SKELETON, GkdExportedSessionSkeletonClass))
#define GKD_EXPORTED_SESSION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_SESSION_SKELETON, GkdExportedSessionSkeletonClass))
#define GKD_IS_EXPORTED_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_SESSION_SKELETON))
#define GKD_IS_EXPORTED_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_SESSION_SKELETON))

typedef struct _GkdExportedSessionSkeleton GkdExportedSessionSkeleton;
typedef struct _GkdExportedSessionSkeletonClass GkdExportedSessionSkeletonClass;
typedef struct _GkdExportedSessionSkeletonPrivate GkdExportedSessionSkeletonPrivate;

struct _GkdExportedSessionSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedSessionSkeletonPrivate *priv;
};

struct _GkdExportedSessionSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_session_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedSessionSkeleton, g_object_unref)
#endif

GkdExportedSession *gkd_exported_session_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Prompt */

#define GKD_TYPE_EXPORTED_PROMPT (gkd_exported_prompt_get_type ())
#define GKD_EXPORTED_PROMPT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PROMPT, GkdExportedPrompt))
#define GKD_IS_EXPORTED_PROMPT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PROMPT))
#define GKD_EXPORTED_PROMPT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GKD_TYPE_EXPORTED_PROMPT, GkdExportedPromptIface))

struct _GkdExportedPrompt;
typedef struct _GkdExportedPrompt GkdExportedPrompt;
typedef struct _GkdExportedPromptIface GkdExportedPromptIface;

struct _GkdExportedPromptIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_dismiss) (
    GkdExportedPrompt *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_prompt) (
    GkdExportedPrompt *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_window_id);

  void (*completed) (
    GkdExportedPrompt *object,
    gboolean arg_dismissed,
    GVariant *arg_result);

};

GType gkd_exported_prompt_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gkd_exported_prompt_interface_info (void);
guint gkd_exported_prompt_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gkd_exported_prompt_complete_prompt (
    GkdExportedPrompt *object,
    GDBusMethodInvocation *invocation);

void gkd_exported_prompt_complete_dismiss (
    GkdExportedPrompt *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gkd_exported_prompt_emit_completed (
    GkdExportedPrompt *object,
    gboolean arg_dismissed,
    GVariant *arg_result);



/* D-Bus method calls: */
void gkd_exported_prompt_call_prompt (
    GkdExportedPrompt *proxy,
    const gchar *arg_window_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_prompt_call_prompt_finish (
    GkdExportedPrompt *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_prompt_call_prompt_sync (
    GkdExportedPrompt *proxy,
    const gchar *arg_window_id,
    GCancellable *cancellable,
    GError **error);

void gkd_exported_prompt_call_dismiss (
    GkdExportedPrompt *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gkd_exported_prompt_call_dismiss_finish (
    GkdExportedPrompt *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gkd_exported_prompt_call_dismiss_sync (
    GkdExportedPrompt *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GKD_TYPE_EXPORTED_PROMPT_PROXY (gkd_exported_prompt_proxy_get_type ())
#define GKD_EXPORTED_PROMPT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PROMPT_PROXY, GkdExportedPromptProxy))
#define GKD_EXPORTED_PROMPT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PROMPT_PROXY, GkdExportedPromptProxyClass))
#define GKD_EXPORTED_PROMPT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PROMPT_PROXY, GkdExportedPromptProxyClass))
#define GKD_IS_EXPORTED_PROMPT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PROMPT_PROXY))
#define GKD_IS_EXPORTED_PROMPT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PROMPT_PROXY))

typedef struct _GkdExportedPromptProxy GkdExportedPromptProxy;
typedef struct _GkdExportedPromptProxyClass GkdExportedPromptProxyClass;
typedef struct _GkdExportedPromptProxyPrivate GkdExportedPromptProxyPrivate;

struct _GkdExportedPromptProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GkdExportedPromptProxyPrivate *priv;
};

struct _GkdExportedPromptProxyClass
{
  GDBusProxyClass parent_class;
};

GType gkd_exported_prompt_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPromptProxy, g_object_unref)
#endif

void gkd_exported_prompt_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPrompt *gkd_exported_prompt_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPrompt *gkd_exported_prompt_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gkd_exported_prompt_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GkdExportedPrompt *gkd_exported_prompt_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GkdExportedPrompt *gkd_exported_prompt_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GKD_TYPE_EXPORTED_PROMPT_SKELETON (gkd_exported_prompt_skeleton_get_type ())
#define GKD_EXPORTED_PROMPT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GKD_TYPE_EXPORTED_PROMPT_SKELETON, GkdExportedPromptSkeleton))
#define GKD_EXPORTED_PROMPT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GKD_TYPE_EXPORTED_PROMPT_SKELETON, GkdExportedPromptSkeletonClass))
#define GKD_EXPORTED_PROMPT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GKD_TYPE_EXPORTED_PROMPT_SKELETON, GkdExportedPromptSkeletonClass))
#define GKD_IS_EXPORTED_PROMPT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GKD_TYPE_EXPORTED_PROMPT_SKELETON))
#define GKD_IS_EXPORTED_PROMPT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GKD_TYPE_EXPORTED_PROMPT_SKELETON))

typedef struct _GkdExportedPromptSkeleton GkdExportedPromptSkeleton;
typedef struct _GkdExportedPromptSkeletonClass GkdExportedPromptSkeletonClass;
typedef struct _GkdExportedPromptSkeletonPrivate GkdExportedPromptSkeletonPrivate;

struct _GkdExportedPromptSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GkdExportedPromptSkeletonPrivate *priv;
};

struct _GkdExportedPromptSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gkd_exported_prompt_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GkdExportedPromptSkeleton, g_object_unref)
#endif

GkdExportedPrompt *gkd_exported_prompt_skeleton_new (void);


G_END_DECLS

#endif /* ____DAEMON_DBUS_GKD_SECRETS_GENERATED_H__ */
